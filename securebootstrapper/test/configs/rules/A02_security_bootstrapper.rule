# 
# <copyright> 
#  Copyright 1999-2004 Cougaar Software, Inc.
#  under sponsorship of the Defense Advanced Research Projects 
#  Agency (DARPA). 
#  
#  You can redistribute this software and/or modify it under the
#  terms of the Cougaar Open Source License as published on the
#  Cougaar Open Source Website (www.cougaar.org).  
#  
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  
# </copyright> 
# 

society.each_host do |host|
  host.each_node do |node|
  
    # Secure bootstrapper logger   
    # node.override_parameter("-Dorg.cougaar.core.security.securebootstrap.logger", "org.cougaar.core.security.securebootstrap.ConsoleLogger")
    
    # Bootstrap keystore to store JAR file keys
    node.override_parameter("-Dorg.cougaar.core.security.bootstrap.keystore", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}security#{File::SEPARATOR}bootstrap_keystore")
    
    # Add the secure bootstrapper to the bootstrap class path
    # This is needed because of a bug in the SDK 1.4.
    # Internal Java runtime classes can create infinite recursive calls
    node.replace_parameter(/-Xbootclasspath\/a/, "-Xbootclasspath/a:$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}secure_bootstrapper.jar#{File::PATH_SEPARATOR}$COUGAAR_INSTALL_PATH#{File::SEPARATOR}lib#{File::SEPARATOR}bootstrap.jar")
    
    # The bootstrapper class
    # This replaces the standard (non-secure bootstrapper) with the secure bootstrapper.
    # The secure bootstrapper adds a Java security manager and an authenticated class loader.
    node.override_parameter("-Dorg.cougaar.bootstrap.class", "org.cougaar.core.security.securebootstrap.SecureBootstrapper")
    
    # The java.security.policy property defines the name of the Java policy file,
    # which is used by the Security Manager.
    # Warning!!! Use JAR files ONLY when using this policy file.
    # If directories containing .class files are included in the CLASSPATH,
    # the .class files will not have sufficient privileges to be executed.
    node.override_parameter("-Djava.security.policy", "$COUGAAR_INSTALL_PATH#{File::SEPARATOR}configs#{File::SEPARATOR}security#{File::SEPARATOR}Cougaar_Java.policy")
    
    # Use Java security manager
    node.override_parameter("-Dorg.cougaar.core.security.useSecurityManager", "true")
    
    # This property specifies whether to use the authenticated class loader or
    # the legacy class loader
    node.override_parameter("-Dorg.cougaar.core.security.useAuthenticatedLoader", "true")
    
    # ########################################################
    # DEBUG properties [probably not used anymore because we are using log4j]
    #
    
    # The java.security.debug property can be used to debug the
    # Security Manager.
    # Acceptable values: all, access, jar, policy, scl, stack, domain, failure
    #node.override_parameter("-Djava.security.debug", "all")
    
    # Used to show bootstrapper debugging information
    # In particular, it will show information about the JAR file signature
    # verification process.
    # Acceptable values: true, shout, false
    #node.override_parameter("-Dorg.cougaar.bootstrap.Bootstrapper.loud" ,"false")
    #node.override_parameter("-Dorg.cougaar.core.security.bootstrapper.policydebug", "all")
    
    # END DEBUG properties
    # ########################################################
    
  end
end
