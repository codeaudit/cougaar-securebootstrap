/*
 * <copyright>
 *  Copyright 1997-2004 Cougaar Software, Inc
 *  under sponsorship of the Defense Advanced Research Projects
 *  Agency (DARPA).
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the Cougaar Open Source License as published by
 *  DARPA on the Cougaar Open Source Website (www.cougaar.org).  
 *  
 *  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS 
 *  PROVIDED "AS IS" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR 
 *  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF 
 *  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT 
 *  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT 
 *  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL 
 *  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS, 
 *  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR 
 *  PERFORMANCE OF THE COUGAAR SOFTWARE.  
 * 
 * </copyright>
 *
 * CHANGE RECORD
 * - 
 */

////////////////////////////////////////////////////////////
// COUGAAR JAVA POLICY FILE

// TODO: Look for "FIX" in this file and fix security vulnerabilities
//       in Cougaar source code.


////////////////////////////////////////////////////////////
// Keystore location
keystore "file:${org.cougaar.core.security.bootstrap.keystore}";

////////////////////////////////////////////////////////////
// Standard extensions get all permissions by default

grant codeBase "file:${java.home}${/}lib${/}ext${/}*" {
	permission java.security.AllPermission;
};

// Crypto providers are listed in the cryptoprovider.conf file under the configs/security directory.

grant codeBase "file:${org.cougaar.install.path}${/}sys${/}bcprov-jdk14-122.jar" {
	// Refer to SUN Java Cryptography Extension (JCE) 1.2.1
	// documentation for a description of the following permissions.
	permission java.lang.RuntimePermission "getProtectionDomain";
	permission java.security.SecurityPermission "putProviderProperty.BC";
};

// FIX: do we want to grant all permissions to all the JAR files in the sys path?
grant codeBase "file:${org.cougaar.install.path}${/}sys${/}*" {
	permission java.security.AllPermission;
};

////////////////////////////////////////////////////////////
// Permissions for bootstrapper package.
//grant codeBase "file:${org.cougaar.install.path}${/}lib${/}bootstrapper.jar" {
grant signedBy "bootstrapper" { 
	// AllPermission grants all permissions in the JDK 1.3,
	// but not the JAAS permissions. Therefore, JAAS permissions
	// must be set additionally.
	permission java.security.AllPermission;

	permission javax.security.auth.AuthPermission "getSubject";
	permission javax.security.auth.AuthPermission "modifyPrincipals";
	permission javax.security.auth.AuthPermission "doAs";
	permission javax.security.auth.AuthPermission "getSubjectFromDomainCombiner";
	permission javax.security.auth.AuthPermission "setReadOnly";
	permission javax.security.auth.AuthPermission "getPolicy";

	// Note that the boostrapper only can write to the bootstrap subdirectory.
	//permission java.io.FilePermission "${org.cougaar.install.path}${/}log${/}bootstrap${/}-", "read";
	//permission java.io.FilePermission "${org.cougaar.install.path}${/}log${/}bootstrap${/}", "read";
	permission org.cougaar.core.security.crypto.KeyRingPermission "installPkcs7Reply";
	permission org.cougaar.core.security.crypto.KeyRingPermission "readPrivateKey";

	permission java.util.PropertyPermission "*", "read, write";
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}Commons_isat_plugins.jar" {
	// setIO is required for the ACME environment only.
	permission java.lang.RuntimePermission "setIO";
};

//////////////////////////////////////////////////////////////////////
// Tomcat 4.0 requires these permissions and therefore we must grant
// them to all classes in the call chain.

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}webserver.jar" signedBy "privileged"  {
        permission java.security.SecurityPermission "getPolicy";
        permission java.lang.RuntimePermission "getClassLoader";
        permission java.lang.RuntimePermission "createClassLoader";
        permission java.util.PropertyPermission "java.protocol.handler.pkgs", "read,write";
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}webtomcat.jar" signedBy "privileged" {
        permission java.security.SecurityPermission "getPolicy";
        permission java.lang.RuntimePermission "getClassLoader";
        permission java.lang.RuntimePermission "createClassLoader";
        permission java.util.logging.LoggingPermission "control";
        permission java.util.PropertyPermission "java.protocol.handler.pkgs", "read,write";
};

grant codeBase "file:${org.cougaar.install.path}${/}sys${/}tomcat_40.jar" signedBy "privileged"  {
        permission java.security.SecurityPermission "getPolicy";
        permission java.lang.RuntimePermission "getClassLoader";
        permission java.lang.RuntimePermission "createClassLoader";
        permission java.util.PropertyPermission "java.protocol.handler.pkgs", "read,write";
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}core.jar" signedBy "privileged" {
	// setIO is required for the ACME environment only.
	permission java.lang.RuntimePermission "setIO";

        permission java.security.SecurityPermission "getPolicy";
        permission java.lang.RuntimePermission "getClassLoader";
        permission java.lang.RuntimePermission "createClassLoader";
        permission java.util.PropertyPermission "java.protocol.handler.pkgs", "read,write";
	permission java.util.PropertyPermission "*", "read, write";

 	permission org.cougaar.core.security.provider.SecurityServicePermission "*";

        // FIX: why is this needed?
        permission org.cougaar.core.security.crypto.KeyRingPermission "KeyRingSSLFactory.getDefault";
        permission org.cougaar.core.security.crypto.KeyRingPermission "KeyRingSSLServerFactory.getDefault";
        permission org.cougaar.core.security.crypto.KeyRingPermission "getKeyStore";

	permission org.cougaar.core.security.access.AccessPermission "org.cougaar.core.service.MessageTransportService";
        // This is needed to run on Windows
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}aggagent.jar" signedBy "privileged" {
        permission java.lang.RuntimePermission "getClassLoader";
        permission java.lang.RuntimePermission "createClassLoader";
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}util.jar" signedBy "privileged" {
	// setIO is required for the ACME environment only.
	permission java.lang.RuntimePermission "setIO";

        permission java.security.SecurityPermission "getPolicy";
        permission java.lang.RuntimePermission "getClassLoader";
	permission java.lang.RuntimePermission "createClassLoader";
	permission org.cougaar.core.security.access.AccessPermission "org.cougaar.core.service.MessageTransportService";
        // FIX: why is this needed?
        permission org.cougaar.core.security.crypto.KeyRingPermission "getKeyStore";

	permission java.util.PropertyPermission "*", "read, write";
 	permission org.cougaar.core.security.provider.SecurityServicePermission "*";
};

grant codeBase "file:${org.cougaar.install.path}${/}sys${/}quoSumo.jar" signedBy "privileged" {
        permission java.lang.RuntimePermission "getClassLoader";
	permission java.lang.RuntimePermission "createClassLoader";
};
grant codeBase "file:${org.cougaar.install.path}${/}lib${/}qos.jar" signedBy "privileged" {
        permission java.lang.RuntimePermission "getClassLoader";
	permission java.lang.RuntimePermission "createClassLoader";
};

grant codeBase "file:${org.cougaar.install.path}${/}sys${/}jpcsc.jar" signedBy "privileged"  {
        permission java.lang.RuntimePermission "loadLibrary.jpcsc";
};

grant signedBy "securitymodule"  {
        permission java.security.SecurityPermission "getPolicy";
        permission java.security.SecurityPermission "setPolicy";
        permission java.security.SecurityPermission "createAccessControlContext";
        permission javax.security.auth.AuthPermission "getSubject";
        permission java.util.logging.LoggingPermission "control";
        permission java.lang.RuntimePermission "getClassLoader";
	permission java.lang.RuntimePermission "createClassLoader";
	permission javax.security.auth.AuthPermission "setReadOnly";
	permission org.cougaar.core.security.auth.ContextPermission "setContextService";
	permission org.cougaar.core.security.auth.ContextPermission "setAuthorizationService";
	permission org.cougaar.core.security.crypto.KeyRingPermission "readPrivateKey";
	permission org.cougaar.core.security.crypto.KeyRingPermission "installPkcs7Reply";
        permission org.cougaar.core.security.crypto.KeyRingPermission "KeyRingSSLFactory.getDefault";
        permission org.cougaar.core.security.crypto.KeyRingPermission "KeyRingSSLServerFactory.getDefault";
        permission org.cougaar.core.security.crypto.KeyRingPermission "getKeyStore";
 	permission org.cougaar.core.security.provider.SecurityServicePermission "*";
	permission org.cougaar.core.security.access.AccessPermission "org.cougaar.core.service.MessageTransportService";

	permission java.io.FilePermission "${java.home}${/}*", "read";
	permission java.io.FilePermission "${java.home}${/}-", "read";
	permission java.io.FilePermission "${java.home}${/}", "read";
        permission java.lang.RuntimePermission "accessClassInPackage.sun.tools.javac";
        permission java.lang.RuntimePermission "accessClassInPackage.sun.net.www.protocol.http";

	permission java.util.PropertyPermission "*", "read, write";
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}safe.jar" signedBy "privileged" {
  permission org.cougaar.core.security.provider.SecurityServicePermission "org.cougaar.core.security.services.util.PolicyBootstrapperService";
  permission org.cougaar.core.security.provider.SecurityServicePermission "org.cougaar.core.security.services.util.ConfigParserService";
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}community.jar" signedBy "privileged" {
  permission org.cougaar.core.security.provider.SecurityServicePermission "org.cougaar.community.CommunityProtectionService";
};

grant codeBase "file:${org.cougaar.install.path}${/}lib${/}mtsstd.jar" signedBy "privileged" {
  // The MTS needs the message protection service to protect messages.
  permission org.cougaar.core.security.provider.SecurityServicePermission "org.cougaar.core.service.MessageProtectionService";
};

////////////////////////////////////////////////////////////
// Permissions for core infrastructure package.
grant signedBy "privileged" {
        // FIX: after bootstrapper patch has been applied
	permission java.util.PropertyPermission "*", "read, write";

        // FIX: why is this needed?
	permission org.cougaar.core.security.access.AccessPermission "org.cougaar.core.service.MessageTransportService";

	// FIX: Temporary until BUG 1264 is fixed:
	// permission java.util.PropertyPermission "*", "read,write";

	////////////////////////////////////////////////////
	// "standard" properies that can be read by anyone
	permission java.util.PropertyPermission "*", "read";

	// Tomcat web server permissions
        // FIX: why is this needed by everybody?
	permission java.util.PropertyPermission "tomcat.*", "read, write";

	///////////////////////////////////////////////////
	// Package access permissions
	permission java.lang.RuntimePermission "accessClassInPackage.sun.beans.infos";
        permission java.lang.RuntimePermission "accessClassInPackage.sun.io";
	permission java.lang.RuntimePermission "accessClassInPackage.sun.misc";
	permission java.lang.RuntimePermission "accessClassInPackage.sun.net";
        // Needed on Windows platforms
        permission java.lang.RuntimePermission "accessClassInPackage.sun.net.www.protocol.c";
        permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.server";
        permission java.lang.RuntimePermission "accessClassInPackage.sun.rmi.transport";
	permission java.lang.RuntimePermission "accessClassInPackage.sun.security.x509";
	permission java.lang.RuntimePermission "accessClassInPackage.sun.security.pkcs";
	permission java.lang.RuntimePermission "accessClassInPackage.sun.security.util";
	permission java.lang.RuntimePermission "accessClassInPackage.sun.security.provider";
        permission java.lang.RuntimePermission "accessClassInPackage.sun.util.calendar";

	///////////////////////////////////////////////////
	// This permission is needed by the AgentManager to associate a JAAS
	// subject with an agent when it starts an agent.
        // FIX: why is this needed by everybody?
	permission javax.security.auth.AuthPermission "modifyPrincipals";
	permission javax.security.auth.AuthPermission "doAs";

	/////////////////////////////////////////////////
	// Socket permissions
	// Allows to listen on un-privileged ports
	permission java.net.SocketPermission "localhost:1024-", "listen";
	// Allows to listen on un-privileged ports
        //   The []'s indicate ipv6 addresses - many systems don't need this
        permission java.net.SocketPermission "*:1024-", "accept";
	permission java.net.SocketPermission "[*]:1024-", "accept";
	// Allows to establish a connection to any remote host
        //   The []'s indicate ipv6 addresses - many systems don't need this
	permission java.net.SocketPermission "*:1-", "connect,resolve";
	permission java.net.SocketPermission "[*]:1-", "connect,resolve";

	////////////////////////////////////////////////////
	// These properties are set in Node.java
        // FIX
	permission java.util.PropertyPermission "org.cougaar.core.society.Node.name", "read, write";
	permission java.util.PropertyPermission "org.cougaar.node.name", "read, write";
	permission java.util.PropertyPermission "org.cougaar.config", "read, write";
	permission java.util.PropertyPermission "org.cougaar.config.server", "read, write";
	permission java.util.PropertyPermission "org.cougaar.name.server", "read, write";
	permission java.util.PropertyPermission "org.cougaar.name.server.port", "read, write";

	////////////////////////////////////////////////////
	// Load crypto providers.
	// The loading of crypto providers should really
	// be moved in the bootstrapper. We need to fix
	// this in a future release.
        // FIX
	permission java.security.SecurityPermission "insertProvider.SunJCE";
	permission java.security.SecurityPermission "insertProvider.SunJSSE";
	permission java.security.SecurityPermission "insertProvider.CryptixCrypto";
	permission java.security.SecurityPermission "insertProvider.Cryptix";
	permission java.security.SecurityPermission "insertProvider.DSTC";
	permission java.security.SecurityPermission "insertProvider.DSTC_PKCS12";
	permission java.security.SecurityPermission "insertProvider.DSTC_X509";

	// The provider properties each specify the name and location of a particular
	// service implemented by the provider. By granting this permission, you let
	// code replace the service specification with another one, thereby specifying
	// a different implementation.
	permission java.security.SecurityPermission "putProviderProperty.CryptixCrypto";

	///////////////////////////////////////////////////
	permission java.lang.RuntimePermission "setFactory";

	permission java.lang.RuntimePermission "setContextClassLoader";

	// accessDeclaredMembers permission
	// This grants code permission to query a class for its public, protected,
	// default (package) access, and private fields and/or methods. Although
	// the code would have access to the private and protected field and
	// method names, it would not have access to the private/protected field
	// data and would not be able to invoke any private methods. Nevertheless,
	// malicious code may use this information to better aim an attack.
	// Additionally, it may invoke any public methods and/or access public
	// fields in the class. This could be dangerous if the code would normally
	// not be able to invoke those methods and/or access the fields because it
	// can't cast the object to the class/interface with those methods and fields.
	// Reason: persistence package requires it.
	// FIX: is it really necessary for the persistence package? Can we find
	// another solution?
	permission java.lang.RuntimePermission "accessDeclaredMembers";

	// exitVM permission
	// This allows an attacker to mount a denial-of-service attack by
	// automatically forcing the virtual machine to halt.
	// Reason: persistence package requires it.
	// FIX: can we find a more elegant solution in the persistence module?
	permission java.lang.RuntimePermission "exitVM";

	// Registration and cancellation of virtual-machine shutdown hooks.
	// This allows an attacker to register a malicious shutdown hook that
	// interferes with the clean shutdown of the virtual machine.
	permission java.lang.RuntimePermission "shutdownHooks";

	////////////////////////////////////////////////////
	// File permissions: java libraries
	// File permission ending in ${/}  means right to list files and folders
	// File permission ending in ${/}* means right to read files
	// File permission ending in ${/}- means right to recursively read files

	// Allow reading from the current directory (the directory where the node
	// was launched). However, write permissions should not be given to the
	// current directory. If the node were started from a directory where
	// some configuration is stored, this would allow a malicious Plugin
	// to overwrite the configuration and replace with a different configuration.
	// FIX: many components write debugging information to the "current"
	// directory

	permission java.io.FilePermission "-", "read";
	permission java.io.FilePermission "*", "read";
	permission java.io.FilePermission "", "read";

	permission java.io.FilePermission "${org.cougaar.workspace}${/}*", "read, write";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}-", "read, write, delete";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}", "read, write, delete";

	permission java.io.FilePermission "${/}proc${/}-", "read";
	permission java.io.FilePermission "${/}tmp${/}", "read, write";
	permission java.io.FilePermission "${/}tmp${/}*", "read, write";

	permission java.io.FilePermission "${/}mnt${/}difs${/}3459${/}*", "read, write, delete";
	permission java.io.FilePermission "${/}mnt${/}difs${/}3459${/}-", "read, write, delete";
	permission java.io.FilePermission "${/}mnt${/}difs${/}3459${/}", "read, write, delete";

        // for ACME
	permission java.io.FilePermission "${org.cougaar.workspace}${/}xmlnodes${/}", "read";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}xmlnodes${/}*", "read";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}xmlnodes${/}--", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}tmp${/}", "read,write";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}tmp${/}*", "read,write";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}tmp${/}--", "read,write";

	// "persistence.clear=true" requires the permission to delete files in the
	// the org.cougaar.workspace/P directory
	permission java.io.FilePermission "${org.cougaar.workspace}${/}P${/}*", "delete";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}P${/}-", "delete";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}P${/}", "delete";

	// Rolling log files need delete permission
	permission java.io.FilePermission "${org.cougaar.workspace}${/}log4jlogs/${/}*", "delete";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}log4jlogs/${/}-", "delete";
	permission java.io.FilePermission "${org.cougaar.workspace}${/}log4jlogs/${/}", "delete";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}", "read";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}planning${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}planning${/}*", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}planning${/}-", "read";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}glmtrans${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}glmtrans${/}*", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}glmtrans${/}-", "read";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}servicediscovery${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}servicediscovery${/}*", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}servicediscovery${/}-", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}yp${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}yp${/}*", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}yp${/}-", "read";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}log${/}core${/}-", "read,write";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}log${/}plugin${/}-", "read,write";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}*", "read";
        permission java.io.FilePermission "${org.cougaar.install.path}${/}", "read";

	// Reason: persistence package requires it.
	permission java.io.FilePermission "${org.cougaar.install.path}${/}P${/}", "read,write,delete";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}P${/}-", "read,write,delete";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}webtomcat${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}webtomcat${/}-", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}webtomcat${/}data${/}work${/}", "read, write, delete";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}webtomcat${/}data${/}work${/}-", "read, write, delete";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}webtomcat${/}data${/}logs${/}", "read, write, delete";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}webtomcat${/}data${/}logs${/}-", "read, write, delete";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}lib${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}lib${/}*", "read";
	// FIX: Why do we need recursive access to the lib directory?
	permission java.io.FilePermission "${org.cougaar.install.path}${/}lib${/}-", "read";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}plugins${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}plugins${/}*", "read";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}sys${/}", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}sys${/}*", "read";
	// FIX: Why do we need recursive access to the sys directory?
	permission java.io.FilePermission "${org.cougaar.install.path}${/}sys${/}-", "read";

	////////////////////////////////////////////////////
	// File permissions: Configuration files
	// FIX: In the 8.3.0 implementation, Plugins read directly from the configs
	// directory, but this gives too many privileges.
	permission java.io.FilePermission "${org.cougaar.install.path}${/}log/plugin${/}-", "read,write";

	permission java.io.FilePermission "${org.cougaar.install.path}${/}configs${/}-", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}core${/}configs${/}common${/}-", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}core${/}configs${/}common${/}*", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}core${/}configs${/}common${/}", "read";
	permission java.io.FilePermission "${user.home}${/}.alprc", "read";
	permission java.io.FilePermission "${user.home}${/}.cougaarrc", "read";

	// FIX: The following permission is suspiscious and should probably be removed:
	permission java.io.FilePermission "${/}opt${/}cougaar-jars${/}", "read";

	// Run-Time environment
	permission java.io.FilePermission "${java.home}${/}lib${/}-", "read";
	permission java.io.FilePermission "${java.home}${/}classes${/}", "read";

	////////////////////////////////////////////////////
	// File permissions: Configuration files
	permission java.io.FilePermission "${org.cougaar.install.path}${/}configs${/}-", "read,write";

	// FIX: What is .alp?
	permission java.io.FilePermission "${user.home}${/}.alp", "read";
	permission java.io.FilePermission "${user.home}${/}.cougaarrc", "read";

	// This is dangerous because malicious code can replace the actual object
	// with one which has incorrect or malignant data.
	// Reason: persistence package requires it.
	// FIX
	permission java.io.SerializablePermission "enableSubstitution";

	////////////////////////////////////////////////////
	// Tomcat 4.0 requires these permissions
        permission java.util.PropertyPermission "catalina.home", "read,write";
        permission java.util.PropertyPermission "catalina.base", "read,write";
        permission java.util.PropertyPermission "catalina.useNaming", "read,write";

	// FIX
	permission org.cougaar.core.security.crypto.KeyRingPermission "installPkcs7Reply";
	permission org.cougaar.core.security.crypto.KeyRingPermission "readPrivateKey";
//	permission java.security.SecurityPermission "printIdentity";
};

grant { 
	// Required by the Jython interpreter.
	// Jython creates Java classes on the fly, and the classes are not signed.
	// TODO: find a better solution
	permission java.util.PropertyPermission "*", "read";
	permission java.io.FilePermission "${java.home}${/}lib${/}-", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}sys${/}-", "read";
	permission java.io.FilePermission "${org.cougaar.install.path}${/}lib${/}-", "read";
};

